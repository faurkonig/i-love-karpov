# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SuperDuperPointMoverDialog
                                 A QGIS plugin
 rgrfghwergreh
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-27
        git sha              : $Format:%H$
        copyright            : (C) 2023 by u/vlad
        email                : u.slash.vlad@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import QgsWkbTypes, QgsVectorLayer, QgsSingleSymbolRenderer, QgsSingleSymbolRenderer, QgsMarkerSymbol, QgsLineSymbol, QgsFillSymbol
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtGui import QColor

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'edit_style_dialog.ui'))


class EditStyleDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(EditStyleDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # self.resetStyleButton.clicked.connect(self._clear_layer_style)
        self.strokeColorButton.clicked.connect(self._update_stroke_color)
        self.fillColorButton.clicked.connect(self._update_fill_color)

    def get_style_data_from_layer(self, layer: QgsVectorLayer):
        self.currentLayer = layer

        geometryType = layer.geometryType()
        geomStr = ''
        layerRenderer = layer.renderer()
        isCorrectRenderer = isinstance(layerRenderer, QgsSingleSymbolRenderer)

        if geometryType == QgsWkbTypes.PointGeometry:
            geomStr = 'Точки'
            self.strokeLabel.setText('Цвет точки:')
            self.fillLabel.hide()
            self.fillWidget.hide()
            self.widthLabel.setText('Размер точки:')
        elif geometryType == QgsWkbTypes.LineGeometry:
            geomStr = 'Линии'
            self.fillLabel.hide()
            self.fillWidget.hide()
        elif geometryType == QgsWkbTypes.PolygonGeometry:
            geomStr = 'Полигоны'
        else:
            isCorrectRenderer = False

        if isCorrectRenderer:
            self.layerNameLabel.setText(f'"{layer.name()}" ({geomStr})')
        else:
            self.strokeLabel.hide()
            self.fillLabel.hide()
            self.strokeWidget.hide()
            self.fillWidget.hide()
            self.widthWidget.hide()
            self.layerNameLabel.setText(f'"{layer.name()}" ({geomStr}) <b style="color: #f00">Неподдерживаемый стиль</b>')

        self.strokeColor = QColor.fromRgb(255, 0, 0)
        self.fillColor = QColor.fromRgb(255, 0, 0)

        self._update_style_fields()


    # def _clear_layer_style(self):
    #     if not hasattr(self, 'currentLayer'):
    #         return

    #     geometryType = self.currentLayer.geometryType()
    #     if geometryType == QgsWkbTypes.PointGeometry:
    #         renderer = QgsSingleSymbolRenderer(QgsMarkerSymbol.createSimple({'name': 'square', 'color': 'red', 'size': 6}))
    #     elif geometryType == QgsWkbTypes.LineGeometry:
    #         renderer = QgsSingleSymbolRenderer(QgsLineSymbol.createSimple({'color': 'red', 'width': 3}))
    #     elif geometryType == QgsWkbTypes.PolygonGeometry:
    #         renderer = QgsSingleSymbolRenderer(QgsLineSymbol.createSimple({'outline_color': 'red', 'color': 'blue', 'width': 3}))
    #     self.currentLayer.setRenderer(renderer)
    #     self.currentLayer.triggerRepaint()

    #     self.get_style_data_from_layer(self.currentLayer)


    def _update_stroke_color(self):
        newColor = QtWidgets.QColorDialog.getColor(self.strokeColor)
        if newColor.isValid():
            self.strokeColor = newColor
            colorName = newColor.name()
            print('New stroke color', colorName)
            self.strokeColorIndicator.setStyleSheet(f'background: {colorName}')


    def _update_fill_color(self):
        newColor = QtWidgets.QColorDialog.getColor(self.fillColor)
        if newColor.isValid():
            self.fillColor = newColor
            colorName = newColor.name()
            print('New fill color', colorName)
            self.fillColorIndicator.setStyleSheet(f'background: {colorName}')


    def _update_style_fields(self):
        geomType = self.currentLayer.geometryType()
        layerRenderer = self.currentLayer.renderer()

        if isinstance(layerRenderer, QgsSingleSymbolRenderer):
            firstSymbol = layerRenderer.symbol().cloneLayers()[0]

            if geomType == QgsWkbTypes.PolygonGeometry:
                self.strokeColor = firstSymbol.strokeColor()
            else:
                self.strokeColor = firstSymbol.color()
            self.strokeColorIndicator.setStyleSheet(f'background: {self.strokeColor.name()}')
            print('Loaded stroke color', self.strokeColor.name())

            self.fillColor = firstSymbol.fillColor()
            self.fillColorIndicator.setStyleSheet(f'background: {self.fillColor.name()}')
            print('Loaded fill color', self.fillColor.name())

            if geomType == QgsWkbTypes.PointGeometry:
                self.widthSpinBox.setValue(layerRenderer.symbol().size())
            elif geomType == QgsWkbTypes.LineGeometry:
                self.widthSpinBox.setValue(firstSymbol.width())
            else:
                self.widthSpinBox.setValue(firstSymbol.strokeWidth())
